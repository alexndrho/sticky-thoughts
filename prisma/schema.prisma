generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thought {
  id        String   @id @default(uuid())
  author    String
  message   String
  color     String
  createdAt DateTime @default(now())
}

model User {
  id                String             @id
  name              String
  email             String
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  username          String
  displayUsername   String?
  sessions          Session[]
  accounts          Account[]
  forums            Forum[]
  forumLikes        ForumLike[]
  forumComments     ForumComment[]
  ForumCommentLikes ForumCommentLike[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Forum {
  id       String         @id @default(cuid())
  title    String
  body     String
  authorId String
  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    ForumLike[]
  comments ForumComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, title])
}

model ForumLike {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  forumId String
  forum   Forum  @relation(fields: [forumId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, forumId])
}

model ForumComment {
  id       String             @id @default(cuid())
  body     String
  authorId String
  author   User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forumId  String
  forum    Forum              @relation(fields: [forumId], references: [id], onDelete: Cascade)
  likes    ForumCommentLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForumCommentLike {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}
